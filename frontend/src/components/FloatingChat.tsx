import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
const api = axios.create({
  baseURL: 'http://localhost:3001',
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  }
});

const FloatingChat = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Array<{role: string, content: string}>>([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isVovanMode, setIsVovanMode] = useState(false);
  const [userName, setUserName] = useState('');
  const [isNameSet, setIsNameSet] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const sessionId = useRef(crypto.randomUUID());

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —á–∞—Ç–∞ –≤–Ω–∏–∑
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —á–∞—Ç –≤–Ω–∏–∑ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const askForName = () => {
    if (!userName) {
      setMessages([{ 
        role: 'assistant', 
        content: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?' 
      }]);
    }
  };

  useEffect(() => {
    askForName();
  }, []);

  const handleNameSubmit = () => {
    if (userName.trim()) {
      setIsNameSet(true);
      setMessages(prev => [...prev, 
        { role: 'user', content: userName },
        { role: 'assistant', content: isVovanMode 
          ? `–ù—É –∑–¥–∞—Ä–æ–≤–∞, ${userName}! –ß–µ –ø—Ä–∏–ø—ë—Ä—Å—è, –∫–∞–∫ –∂–µ —Ç—ã –∑–∞–µ–±–∞–ª...` 
          : `–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${userName}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?` 
        }
      ]);
    }
  };

  const sendMessage = async () => {
    if (!input.trim()) return;

    const userMessage = input.trim();
    setInput('');
    setIsLoading(true);

    setMessages(prev => [...prev, { role: 'user', content: userMessage }]);

    try {
      const response = await api.post('/api/chat', {
        message: userMessage,
        isVovanMode,
        sessionId: sessionId.current,
        userName
      });

      if (response.data.choices && response.data.choices[0]?.message?.content) {
        setMessages(prev => [...prev, { 
          role: 'assistant', 
          content: response.data.choices[0].message.content 
        }]);
      } else {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      setMessages(prev => [...prev, { 
        role: 'assistant', 
        content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
      }]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  return (
    <div className="fixed bottom-4 right-4 z-50">
      {isOpen ? (
        <Card className="w-[350px] h-[500px] flex flex-col">
          <div className="p-4 border-b flex justify-between items-center">
            <h2 className="text-xl font-bold">–ß–∞—Ç —Å –±–∞—Ä–º–µ–Ω–æ–º</h2>
            <div className="flex gap-2">
              <Button
                variant={isVovanMode ? "destructive" : "secondary"}
                size="sm"
                onClick={() => setIsVovanMode(!isVovanMode)}
              >
                {isVovanMode ? '–í–æ–≤–∞–Ω' : '–û–±—ã—á–Ω—ã–π'}
              </Button>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setIsOpen(false)}
              >
                ‚úï
              </Button>
            </div>
          </div>
          
          <div className="flex-1 overflow-y-auto p-4">
            <div className="space-y-4">
              {messages.map((message, index) => (
                <div
                  key={index}
                  className={`p-3 rounded-lg text-sm ${
                    message.role === 'user'
                      ? 'bg-primary text-primary-foreground ml-auto'
                      : 'bg-muted'
                  } max-w-[80%]`}
                >
                  {message.content}
                </div>
              ))}
              {isLoading && (
                <div className="p-3 bg-muted rounded-lg max-w-[80%] text-sm">
                  {isVovanMode ? '–í–æ–≤–∞–Ω –ø–µ—á–∞—Ç–∞–µ—Ç...' : '–ë–∞—Ä–º–µ–Ω –ø–µ—á–∞—Ç–∞–µ—Ç...'}
                </div>
              )}
              <div ref={messagesEndRef} />
            </div>
          </div>

          <div className="p-4 border-t">
            <div className="flex gap-2">
              {!isNameSet ? (
                <>
                  <Input
                    value={userName}
                    onChange={(e) => setUserName(e.target.value)}
                    onKeyDown={(e) => e.key === 'Enter' && handleNameSubmit()}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è..."
                    className="text-sm"
                  />
                  <Button 
                    type="button"
                    onClick={handleNameSubmit}
                    size="sm"
                  >
                    OK
                  </Button>
                </>
              ) : (
                <>
                  <Input
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    onKeyDown={handleKeyDown}
                    placeholder={isVovanMode ? "–ù–∞–ø–∏—à–∏ –í–æ–≤–∞–Ω—É..." : "–°–ø—Ä–æ—Å–∏ —É –±–∞—Ä–º–µ–Ω–∞..."}
                    disabled={isLoading}
                    className="text-sm"
                  />
                  <Button 
                    type="button"
                    onClick={sendMessage}
                    disabled={isLoading}
                    size="sm"
                  >
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                  </Button>
                </>
              )}
            </div>
          </div>
        </Card>
      ) : (
        <Button
          onClick={() => setIsOpen(true)}
          className="rounded-full w-12 h-12 p-0"
        >
          üí¨
        </Button>
      )}
    </div>
  );
};

export default FloatingChat; 
